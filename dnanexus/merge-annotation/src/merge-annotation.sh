#!/bin/bash
# merge-annotation 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of gene_annotation: '$gene_annotation'"
    echo "Value of trna_annoation: '$trna_annoation'"
    echo "Value of spike_in: '$spike_in'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    gene_fn = `dx describe "$gene_annotation" --name | cut -d'.' -f1`
    dx download "$gene_annotation" -o "$gene_fn".gtf.gz
    gunzip "$gene_fn".gtf.gz

    trna_fn = `dx describe "$trna_annotation" --name | cut -d'.' -f1`
    dx download "$trna_annotation" -o "$trna_fn".gtf.gz
    gunzip "$trna_fn".gtf.gz

    spike_in_fn = `dx describe "$spike_in" --name | cut -d'.' -f1`
    dx download "$spike_in" -o "$spike_in_fn".fa.gz
    gunzip "$spike_in_fn".fa.gz

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.
    out_fn = "$gene_fn"-"trna_fn"-"$spike_in_fn".gtf
    GTF.awk ${gene_fn}.gtf ${trna_fn}.gtf ${spike_in_fn}.fa > ${out_fn}
    combined_gtf=$(dx upload $out_fn --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output combined_gtf "$combined_gtf" --class=file
}
