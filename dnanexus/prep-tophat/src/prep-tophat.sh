#!/bin/bash
# prep-star 0.0.1
# Generated by dx-app-wizard.

main() {
    echo "Value of annotations: '$annotations'"
    echo "Value of genome: '$genome'"
    echo "Value of spike_in: '$spike_in'"
    echo "Value of index_prefix: '$index_prefix'"

    ## install tophat 2.0.9
    #wget http://mirrors.kernel.org/ubuntu/pool/universe/t/tophat/tophat_2.0.9-1ubuntu1_amd64.deb
    #sudo dpkg -i tophat_2.0.9-1ubuntu1_amd64.deb
    #sudo apt-get -f install

    ## install bowtie2_2.1.0
    #wget http://mirrors.kernel.org/ubuntu/pool/universe/b/bowtie2/bowtie2_2.1.0-2_amd64.deb
    #sudo dpkg -i --force-depends --instdir resources bowtie2_2.1.0-2_amd64.deb

    echo "Download files"
    annotation_fn=`dx describe "$annotations" --name`
    annotation_fn=${annotation_fn%.gtf.gz}
    dx download "$annotations" -o "$annotation_fn".gtf.gz
    gunzip "$annotation_fn".gtf.gz
    anno_prefix=${annotation_fn}

    genome_fn=`dx describe "$genome" --name`
    genome_fn=${genome_fn%.fasta.gz}
    genome_fn=${genome_fn%.fa.gz}
    dx download "$genome" -o "$genome_fn".fa.gz
    gunzip "$genome_fn".fa.gz
    ref="$genome_fn".fa
    geno_prefix=${genome_fn}

    dx download file-BKyfb080ZZ0P4jQFVGB01966 -o tiny.fq.gz
    gunzip tiny.fq.gz

    if [ -n "$spike_in" ]; then
        spike_in_fn=`dx describe "$spike_in" --name`
        spike_in_fn=${spike_in_fn%.fasta.gz}
        spike_in_fn=${spike_in_fn%.fa.gz}
        dx download "$spike_in" -o "$spike_in_fn".fa.gz
        gunzip "$spike_in_fn".fa.gz
        ref="${ref},${spike_in_fn}.fa"
        geno_prefix="${genome_fn}-${spike_in_fn}"
    fi
    echo "Value of geno_prefix: '$geno_prefix'"
    echo "Value of anno_prefix: '$anno_prefix'"

    # Fill in your application code here.

    mkdir out
    bowtie2-build --offrate 3 -f ${ref} out/$geno_prefix
    #bowtie2-build -f ${ref} out/$geno_prefix
    # make sure the combined fa file is preserved in the archive, so that it isn't rebuilt each time
    bowtie2-inspect out/$geno_prefix > out/$geno_prefix.fa

    # Attempt to make bamCommentLines.txt. NOTE tabs handled by assignment.
    echo "create bam header"
    refComment="@CO\tREFID:${genome_fn}"
    annotationComment="@CO\tANNID:${annotation_fn}"
    echo -e ${refComment} > out/${geno_prefix}_bamCommentLines.txt
    echo -e ${annotationComment} >> out/${geno_prefix}_bamCommentLines.txt
    if [ -n "$spike_in" ]; then
        spikeInComment="@CO\tSPIKEID:${spike_in_fn}"
        echo -e ${spikeInComment} >> out/${geno_prefix}_bamCommentLines.txt
    fi

    echo `cat "out/${geno_prefix}_bamCommentLines.txt"`

    echo "run a 'quicky' tophat to generate index"
    tophat --no-discordant --no-mixed -p 8 -z0 --min-intron-length 20 --max-intron-length 1000000 \
           --read-mismatches 4 --read-edit-dist 4 --max-multihits 20 --library-type fr-firststrand \
           --GTF "$annotation_fn".gtf --no-coverage-search \
           --transcriptome-index=out/${anno_prefix} out/${geno_prefix} tiny.fq

    echo "tar and upload"
    echo `ls out/`
    tar -czf ${index_prefix}_tophatIndex.tgz out/${geno_prefix}* out/${anno_prefix}*

    tophat_index=$(dx upload ${index_prefix}_tophatIndex.tgz --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output tophat_index $tophat_index --class=file
}

