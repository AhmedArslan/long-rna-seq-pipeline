#!/bin/bash
# prep-star 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of annotations: '$annotations'"
    echo "Value of genome: '$genome'"
    echo "Value of spike_in: '$spike_in'"
    echo "Value of index_prefix: '$index_prefix'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    ## install tophat 2.0.9
    #wget http://mirrors.kernel.org/ubuntu/pool/universe/t/tophat/tophat_2.0.9-1ubuntu1_amd64.deb
    #sudo dpkg -i tophat_2.0.9-1ubuntu1_amd64.deb
    #sudo apt-get -f install

    ## install bowtie2_2.1.0
    #wget http://mirrors.kernel.org/ubuntu/pool/universe/b/bowtie2/bowtie2_2.1.0-2_amd64.deb
    #sudo dpkg -i --force-depends --instdir resources bowtie2_2.1.0-2_amd64.deb

    echo "Download files"
    annotation_fn=`dx describe "$annotations" --name | cut -d'.' -f1,2,3`
    dx download "$annotations" -o "$annotation_fn".gtf.gz
    gunzip "$annotation_fn".gtf.gz

    genome_fn=`dx describe "$genome" --name | cut -d'.' -f1`
    dx download "$genome" -o "$genome_fn".fa.gz
    gunzip "$genome_fn".fa.gz
    ref="$genome_fn".fa

    #dx download file-BKyfb080ZZ0P4jQFVGB01966 -o tiny.fq.gz
    #gunzip tiny.fq.gz

    if [ -n "$spike_in" ]
    then
        spike_in_fn=`dx describe "$spike_in" --name | cut -d'.' -f1`
        dx download "$spike_in" -o "$spike_in_fn".fa
        #gunzip "$spike_in_fn".fa.gz
        ref="${ref},${spike_in_fn}.fa"

    fi

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.


    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    mkdir out
#    /usr/bin/bowtie2-build --offrate 3 -f ${ref} out/${index_prefix}
    /usr/bin/bowtie2-build -f ${ref} out/${index_prefix}

    # Attempt to make bamCommentLines.txt, which should be reviewed. NOTE tabs handled by assignment.
    echo "create bam header"
    refComment="@CO\tREFID:$(basename ${genome_fn})"
    annotationComment="@CO\tANNID:$(basename ${annotation_fn})"
    spikeInComment="@CO\tSPIKEID:${spike_in_fn}"
    echo -e ${refComment} > out/${index_prefix}_bamCommentLines.txt
    echo -e ${annotationComment} >> out/${index_prefix}_bamCommentLines.txt
    echo -e ${spikeInComment} >> out/${index_prefix}_bamCommentLines.txt

    echo `cat "out/${index_prefix}_bamCommentLines.txt"`

    #echo "run a quicky tophat to generate index"
    #/usr/bin/tophat --no-discordant --no-mixed -p 8 -z0 --min-intron-length 20 --max-intron-length 1000000 \
    #       --read-mismatches 4 --read-edit-dist 4 --max-multihits 20 --library-type fr-firststrand \
    #       --GTF ${annotation_fn}.gtf --transcriptome-index=out/${index_prefix} \
    #       out/${index_prefix} tiny.fq

    echo "tar and upload"
    mv *.gtf out/${index_prefix}.gtf
    echo `ls out/`
    tar -czf ${index_prefix}_tophatIndex.tgz out/${index_prefix}*

    tophat_index=$(dx upload ${index_prefix}_tophatIndex.tgz --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output tophat_index $tophat_index --class=file
}
